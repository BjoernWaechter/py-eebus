from dataclasses import dataclass
from ship.message_type import *
import json


def array_2_dict(arr):
    return {list(v.keys())[0]:v[list(v.keys())[0]] for v in arr}


def get_object_data(obj):
    return obj.get_data()


@dataclass()
class ShipMessage:
    def __init__(
            self
    ):
        self._root_tag = ""
        self._msg_type = b'\x00'
        self._msg: ShipMessageType = ShipMessageType()

    def get_msg_bytes(self):
        json_data = self.get_data()
        data_bytes = self._msg_type + json_data.encode('utf8')
        return data_bytes

    def get_type(self):
        return self._msg_type

    @classmethod
    def from_data(cls, bin_msg):
        first_byte = bin_msg[0:1]
        msg_type = MessageType(first_byte)
        data = json.loads(bin_msg[1:].decode("utf8"))
        root_tag = list(data.keys())[0]

        msg = ROOT_TAG_2_TYPE[root_tag].from_data(data[root_tag])

        if msg_type != msg.get_type():
            raise RuntimeError("Message type of restored message does not match the type of the parsed one.")

        return msg

    def get_data(self):
        if self._msg:
            return json.dumps({self._root_tag: self._msg.get_data()}, separators=(',', ':'), default=get_object_data)
        else:
            return ""


class Cmi(ShipMessage):
    def __init__(
            self,
    ):
        super().__init__()
        self._msg_type = MessageType.MSG_TYPE_INIT
        self._msg = None

    @classmethod
    def from_data(cls, data):
        return cls()

    def get_msg_bytes(self):
        data_bytes = self._msg_type + b'\x00'
        return data_bytes

    def get_data(self):
        return None

{% for ele in elements %}
class {{ ele.name }}(ShipMessage):
    def __init__(
            self,
{% for m in ele.members %}            {{ m.snake_case_name }}{% if m.data_type %}: {% if m.is_array %}list[{% endif %}{{ m.data_type }}{% if m.is_array %}]{% endif %}{% endif %}{% if m.default_value or m.is_optional %} = None{% endif %},
{% endfor %}    ):
        super().__init__()
        {% for m in ele.members %}{% if m.default_value %}
        if {{ m.name | lower }} is None:
            {{ m.name }} = {{ m.default_value }}{% endif %}{% endfor %}
        self._msg_type = {{ ele.msg_type_numeric }}
        self._root_tag = "{{ ele.msg_name }}"
        self._msg = {{ ele.data_type }}(
{% for m in ele.members %}            {{ m.snake_case_name }}={{ m.snake_case_name }},
{% endfor %}        )

    @classmethod
    def from_data(cls, data):
        data_dict = array_2_dict(data)
        return cls({% for m in ele.members %}
            {{ m.snake_case_name }}=data_dict['{{ m.name }}'], {% endfor %}
        )

{% endfor %}
ROOT_TAG_2_TYPE = {
{% for ele in elements %}    "{{ ele.msg_name }}": {{ ele.name }},
{% endfor %}}